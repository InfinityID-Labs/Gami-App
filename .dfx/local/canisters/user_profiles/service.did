type UserProfile = 
 record {
   achievements: vec text;
   email: opt text;
   id: UserId;
   joinDate: int;
   lastActive: int;
   level: nat;
   preferences: UserPreferences;
   streak: nat;
   totalRewards: float64;
   username: text;
   xp: nat;
 };
type UserPreferences = 
 record {
   language: text;
   notifications: bool;
   privacy: bool;
   theme: text;
 };
type UserId = principal;
type Result_1 = 
 variant {
   err: text;
   ok: Achievement;
 };
type Result = 
 variant {
   err: text;
   ok: UserProfile;
 };
type Achievement = 
 record {
   category: text;
   description: text;
   id: text;
   requirement: nat;
   title: text;
   unlocked: bool;
   unlockedAt: opt int;
 };
service : {
  createProfile: (username: text, email: opt text) -> (Result);
  getAllAchievements: () -> (vec Achievement) query;
  getGlobalStats: () ->
   (record {
      averageLevel: float64;
      totalUsers: nat;
      totalXP: nat;
    }) query;
  getProfile: (userId: opt UserId) -> (opt UserProfile) query;
  getUserAchievements: (userId: UserId) -> (vec Achievement) query;
  greet: (name: text) -> (text) query;
  initializeAchievements: () -> ();
  unlockAchievement: (userId: UserId, achievementId: text) -> (Result_1);
  updateProfile: (username: opt text, email: opt text, preferences:
   opt UserPreferences) -> (Result);
  updateXP: (xpGain: nat) -> (Result);
}
