type UserId = principal;
type Result = 
 variant {
   err: text;
   ok: LeaderboardEntry;
 };
type LeaderboardType = 
 variant {
   Global;
   Local;
   Monthly;
   Weekly;
 };
type LeaderboardEntry = 
 record {
   change: int;
   lastActive: int;
   level: nat;
   rank: nat;
   streak: nat;
   userId: UserId;
   username: text;
   xp: nat;
 };
service : {
  getLeaderboard: (leaderboardType: LeaderboardType, limit: opt nat) ->
   (vec LeaderboardEntry) query;
  getLeaderboardStats: () ->
   (record {
      averageLevel: float64;
      lastUpdate: int;
      topXP: nat;
      totalPlayers: nat;
    }) query;
  getTopPerformers: (category: text, limit: nat) ->
   (vec LeaderboardEntry) query;
  getUserRank: (userId: UserId, leaderboardType: LeaderboardType) ->
   (opt nat) query;
  greet: (name: text) -> (text) query;
  updateRankings: () -> ();
  updateUserEntry: (userId: UserId, username: text, level: nat, xp: nat,
   streak: nat) -> (Result);
}
